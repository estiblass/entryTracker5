name: EntryTracker CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: 3.10

      - name: Install dependencies
        run: pip install -r entryTracker/requirements.txt

      - name: Run the application in background
        run: |
          python entryTracker/app.py &
          sleep 5

      - name: Run unit test with curl
        run: curl http://localhost:5000

  package:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Build Docker image
        run: docker build -t estiblass/entrytracker:latest .

  e2e_test:
    runs-on: ubuntu-latest
    needs: package
    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: rootpassword
          MYSQL_DATABASE: entrytrackerdb
          MYSQL_USER: user
          MYSQL_PASSWORD: password
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Start docker-compose
        run: docker-compose up -d

      - name: Wait for services to be healthy
        run: |
          for i in {1..30}; do
            STATUS=$(docker inspect --format='{{.State.Health.Status}}' entrytracker_mysql_1)
            if [ "$STATUS" == "healthy" ]; then
              echo "MySQL is healthy"
              break
            fi
            echo "Waiting for MySQL to be healthy..."
            sleep 5
          done

      - name: Run E2E test with curl
        run: curl http://localhost:5000

      - name: Stop docker-compose
        run: docker-compose down

  push_image:
    runs-on: ubuntu-latest
    needs: e2e_test
    steps:
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker image
        run: docker push estiblass/entrytracker:latest

